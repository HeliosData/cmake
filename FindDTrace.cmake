# - Find dtrace executable and provides a macro to generate custom build rules
#
# The module defines the following variables:
#  DTRACE_FOUND - true is dtrace executable is found
#  DTRACE_EXECUTABLE - the path to the dtrace executable
#  DTRACE_VERSION - the version of dtrace
#  DTRACE_LIBRARIES - The dtrace libraries
#
# The minimum required version of dtrace can be specified using the
# standard syntax, e.g. FIND_PACKAGE(DTRACE 2.5.13)
#
#
# If dtrace is found on the system, the module provides the macro:
#  DTRACE_TARGET(Name dtraceInput dtraceOutput [COMPILE_FLAGS <string>])
# which creates a custom command  to generate the <dtraceOutput> file from
# the <dtraceInput> file.  If COMPILE_FLAGS option is specified, the next
# parameter is added to the dtrace command line. Name is an alias used to
# get details of this custom command.  Indeed the macro defines the
# following variables:
# 
#  DTRACE_${Name}_DEFINED - true is the macro ran successfully
#  DTRACE_${Name}_OUTPUTS - the source file generated by the custom rule, an
#  alias for dtraceOutput
#  DTRACE_${Name}_INPUT - the dtrace source file, an alias for ${dtraceInput}
#
#  ====================================================================
#  Example:
#
#   find_package(DTRACE)
#
#   DTRACE_TARGET(MyDtrace SomeProvider.d  ${CMAKE_CURRENT_BIANRY_DIR}/SomeProvider.h)
#
#   include_directories(${CMAKE_CURRENT_BINARY_DIR})
#   add_executable(Foo
#      Foo.cc
#   )
#  ====================================================================

#=============================================================================
# Derived from FindFLEX.cmake, which has the following copyrights:
# 
# Copyright 2009 Kitware, Inc.
# Copyright 2006 Tristan Carel
#
# Built in 2012 by Gilbert Clark to search for / use dtrace to
# generate header files.  This is not compatible with Solaris, but
# should work for FreeBSD / OS X.
# 
# Distributed under the OSI-approved BSD License (the "License"):
# CMake - Cross Platform Makefile Generator
# Copyright 2000-2009 Kitware, Inc., Insight Software Consortium
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the names of Kitware, Inc., the Insight Software Consortium,
#   nor the names of their contributors may be used to endorse or promote
#   products derived from this software without specific prior written
#   permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# This software is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the License for more information.
#=============================================================================

FIND_PROGRAM(DTRACE_EXECUTABLE dtrace DOC "path to the dtrace executable")
MARK_AS_ADVANCED(DTRACE_EXECUTABLE)

IF(DTRACE_EXECUTABLE)

  EXECUTE_PROCESS(COMMAND ${DTRACE_EXECUTABLE} -V
    OUTPUT_VARIABLE DTRACE_version_output
    ERROR_VARIABLE DTRACE_version_error
    RESULT_VARIABLE DTRACE_version_result
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  IF(NOT ${DTRACE_version_result} EQUAL 0)
    IF(DTRACE_FIND_REQUIRED)
      MESSAGE(SEND_ERROR "Command \"${DTRACE_EXECUTABLE} -V\" failed with output:\n${DTRACE_version_output}\n${DTRACE_version_error}")
    ELSE()
      MESSAGE("Command \"${DTRACE_EXECUTABLE} -V\" failed with output:\n${DTRACE_version_output}\n${DTRACE_version_error}\nDTRACE_VERSION will not be available")
      SET(DTRACE_VERSION "Unknown")
    ENDIF()
  ELSE()
    STRING(REGEX REPLACE "^dtrace: (.*)$" "\\1"
      DTRACE_VERSION "${DTRACE_version_output}")
  ENDIF()

  #============================================================
  # DTRACE_TARGET (public macro)
  #============================================================
  
  MACRO(DTRACE_TARGET Name OutputDir)
    SET(DTRACE_TARGET_usage "DTRACE_TARGET(<Name> <OutputDir> [COMPILE_FLAGS <string>]")
    IF(${ARGC} GREATER 2)
      IF(${ARGC} EQUAL 4)
        IF("${ARGV3}" STREQUAL "COMPILE_FLAGS")
          SET(DTRACE_EXECUTABLE_opts  "${ARGV4}")
          SEPARATE_ARGUMENTS(DTRACE_EXECUTABLE_opts)
        ELSE()
          MESSAGE(SEND_ERROR ${DTRACE_TARGET_usage})
        ENDIF()
      ELSE()
        MESSAGE(SEND_ERROR ${DTRACE_TARGET_usage})
      ENDIF()
    ENDIF()

    SET(Input ${Name}.d)
    SET(HeaderOutput ${OutputDir}/${Name}.h)
    if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
      SET(ObjectOutput ${OutputDir}/${Name}.o)
    endif()

    ADD_CUSTOM_COMMAND(OUTPUT ${HeaderOutput}
      COMMAND ${DTRACE_EXECUTABLE}
      ARGS ${DTRACE_EXECUTABLE_opts} -o ${HeaderOutput} -h -s ${Input}
      DEPENDS ${Input}
      COMMENT "[DTRACE] Building ${Input} --> ${Name}.h with dtrace ${DTRACE_VERSION}"
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
      ADD_CUSTOM_COMMAND(OUTPUT ${ObjectOutput}
        COMMAND ${DTRACE_EXECUTABLE}
        ARGS ${DTRACE_EXECUTABLE_opts} -o ${ObjectOutput} -G -s ${Input}
        DEPENDS ${Input}
        COMMENT "[DTRACE] Building ${Input} --> ${Name}.o with dtrace ${DTRACE_VERSION}"
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    endif()
    SET(DTRACE_${Name}_DEFINED TRUE)
    SET(DTRACE_${Name}_OUTPUTS ${ObjectOutput} ${HeaderOutput})
    SET(DTRACE_${Name}_INPUT ${Input})
    SET(DTRACE_${Name}_COMPILE_FLAGS ${DTRACE_EXECUTABLE_opts})
  ENDMACRO(DTRACE_TARGET)
  #============================================================
ENDIF(DTRACE_EXECUTABLE)

INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(DTRACE DTRACE_EXECUTABLE
                                       DTRACE_VERSION)

# FindDTRACE.cmake ends here

